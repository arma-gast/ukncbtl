#summary UKNCBTL.Qt scripting.
#labels Featured

= Скрипты в UKNCBTL.Qt =

Начиная с UKNCBTL.Qt версии beta-32 в оболочку эмулятора добавлена поддержка скриптинга. Командой *File > Run Script* выбирается .JS-файл и запускается на выполнение. Язык файла -- ECMAScript, по сути это JavaScript.

Справочник по ECMAScript: http://qt-project.org/doc/qt-4.8/ecmascript.html

В тексте программы может использоваться объект `emulator`, методы которого используются для управления эмулятором UKNCBTL.

== Методы объекта emulator ==

<dt>`emulator.reset();` // since beta 32</dt>
<dd>Сброс эмулируемой машины.</dd>

<dt>`emulator.run(100);` // since beta 32</dt>
<dd>Работа эмулятора в течение 100 фреймов, каждый фрейм это 1/25 секунды.</dd>

<dt>`emulator.saveScreenshot("test.png");` // since beta 32</dt>
<dd>Сохранение скриншота в формате PNG.</dd>

<dt>`emulator.attachCartridge(1, 'romctr_basic.bin');` // since beta 33</dt>
<dd>Подключение картриджа.</dd>

<dt>`emulator.detachCartridge(1);` // since beta 33
<dd>Отключение картриджа.</dd>

<dt>`emulator.attachFloppy(0, 'sys1002.dsk');` // since beta 33</dt>
<dd>Подключение образа диска.</dd>

<dt>`emulator.detachFloppy(0);` // since beta 33</dt>
<dd>Отключение диска.</dd>

<dt>`emulator.attachHard(1, 'WDC170inv.img');` // since beta 33</dt>
<dd>Подключение образа жёсткого диска, работает только если уже подключена прошивка через emulator.attachCartridge</dd>

<dt>`emulator.detachHard(1);` // since beta 33</dt>
<dd>Отключение жёсткого диска.</dd>

<dt>`emulator.getUptime()` либо свойство `emulator.uptime` // since beta 33</dt>
<dd>Возвращает тип number -- количество секунд работы эмулируемой машины, по emulator.reset() сбрасывается в 0.</dd>

<dt>`emulator.keyScan(0153);` // since beta 33</dt>
<dd>Нажимает клавишу (задаётся скан-код), прогон 3 фрейма, отпускает, прогон 3 фрейма.</dd>

<dt>`emulator.keyScan(0153, 6);` // since beta 33</dt>
<dd>То же, но задаётся интервал (фреймов) от нажатия до отжатия.</dd>

<dt>`emulator.keyScanShift(0013);` // since beta 33</dt>
<dd>Нажатие SHIFT, 2 фрейма, нажатие клавиши, 3 фрейма, отжатие клавиши, 2 фрейма, отжатие SHIFT, 3 фрейма -- т.е. комбинация для ввода символа в другом регистре.</dd>

<dt>`emulator.keyString('1\n');` // since beta 33</dt>
<dd>Ввод серии символов; для каждого ASCII-символа ищется скан-код, если нужно используется нажатие SHIFT.</dd>

<dt>`emulator.getCPU()` либо `emulator.cpu` // since beta 33</dt>
<dd>Получение объекта для ЦП.</dd>

<dt>`emulator.getPPU()` либо `emulator.ppu` // since beta 33</dt>
<dd>Получение объекта для ПП.</dd>

<dt>`emulator.consolePrint('message')` // since beta ??</dt>
<dd>Вывод сообщения в окно отладочной консоли; это окно видно если показаны отладочные окна.</dd>

== Методы объектов emulator.cpu и emulator.ppu ==
(В примерах используется `emulator.ppu`, для `emulator.cpu` работает точно также.)

<dt>`emulator.ppu.getName()` либо `emulator.ppu.name` // since beta 33</dt>
<dd>Название процессора, "CPU" либо "PPU".</dd>

<dt>`emulator.ppu.getReg(0)` либо `emulator.ppu.r(0)` // since beta 33</dt>
<dd>Значение в регистре 0..7.</dd>

<dt>`emulator.ppu.getPC()` либо `emulator.ppu.pc` // since beta 33</dt>
<dd>Значение в регистре 7.</dd>

<dt>`emulator.ppu.getSP()` либо `emulator.ppu.sp` // since beta 33</dt>
<dd>Значение в регистре 6.</dd>

<dt>`emulator.ppu.getPSW()` либо `emulator.ppu.psw` // since beta 33</dt>
<dd>Значение в PSW.</dd>

<dt>`emulator.ppu.isHalt()` либо `emulator.ppu.halt` // since beta 33</dt>
<dd>Признак HALT/USER режима.</dd>

<dt>`emulator.ppu.readWord(0160304)` // since beta 33</dt>
<dd>Прочитать слово из памяти процессора.</dd>

<dt>`emulator.ppu.disassemble(0160304)` // since beta 33</dt>
<dd>Дизассемблирует одну инструкцию по заданному адресу, возвращает массив из четырёх элементов: { address, instruction, arguments, instruction length }.</dd>

== Пример скрипта ==
Сбрасываем машинку, записываем процесс загрузки в виде скриншотов через каждые 10 фреймов:
{{{
emulator.reset();

for (i = 0; i < 10; i++)
{
  emulator.run(10);
  emulator.saveScreenshot('test' + i + '.png');
}
}}}

== Советы и находки ==

Для перевода числа в строку в восьмеричной системе используем `toString(8)`.